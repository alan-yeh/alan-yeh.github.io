<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
    xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
    <channel>
        <atom:link href="rss" rel="self" type="application/rss+xml" />
        
        <title><![CDATA[Alan Yeh - Objective-C]]></title>
        <link>http://yerl.cn/tag/Objective-C</link>
<!--        需要修复-->
        <description><![CDATA[]]></description>
        
        
        <language>zh-cn</language>
        <managingEditor><![CDATA[Alan Yeh]]></managingEditor>
        
<item>
    <title><![CDATA[PSPromise在项目中实践]]></title>
    <link>http://yerl.cn/blog/promise-practise</link>
    <author><![CDATA[Alan Yeh]]></author>
    <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
    <dc:date>2016-03-07T00:00:00+00:00</dc:date>
    <guid><![CDATA[/blog/promise-practise]]></guid>
    <description><![CDATA[　　经过上一篇博客，对于PSPromise的介绍，对Promise的相关语法大概了解了。这篇博客主要介绍PSPromise在项目中如何实践，如何优雅地写代码。代码已上传至GitHub中。

　　本项目使用了AFNetworking、SVProgressHUD、PSPromise三个框架。项目主要内容是，获取豆瓣网上一本书的标题与简介(字段太多了，只取了两个简单的字段)。通过Promise，将...]]></description>
</item>

<item>
    <title><![CDATA[PSPromise Promise的简易实现]]></title>
    <link>http://yerl.cn/blog/pspromise</link>
    <author><![CDATA[Alan Yeh]]></author>
    <pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>
    <dc:date>2016-03-05T00:00:00+00:00</dc:date>
    <guid><![CDATA[/blog/pspromise]]></guid>
    <description><![CDATA[　　PSPromise是Promise的简易实现。遵循CommonJS的Promise/A接口标准，同时实现了一些扩展接口，使PSPromise更实用。

　　近期看到一个很有意思的框架PromiseKit。看到PromiseKit的源码之后，对它的编写方式感到神奇，刚开始完全看不懂在写什么东西，而且代码是怎么运行的也完全没个头绪。仔细分析了大半天之后，感叹大神写代码的确与众不同。由于个人的...]]></description>
</item>

<item>
    <title><![CDATA[PSDelayInvocation 间隔延时调用]]></title>
    <link>http://yerl.cn/blog/psdelayinvocation</link>
    <author><![CDATA[Alan Yeh]]></author>
    <pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate>
    <dc:date>2016-01-15T00:00:00+00:00</dc:date>
    <guid><![CDATA[/blog/psdelayinvocation]]></guid>
    <description><![CDATA[　　刚刚遇到一个问题，大概是这样的：UISlider滑动时，将UISlider当前值发送给蓝牙。很简单的需求，但是有一个问题，就是不能过于频繁地向蓝牙设备发送消息，否则蓝牙设备由于处理不过来而断开连接。最后测试结果是，最小间隔不能低于0.4秒，否则可能断开连接。

　　刚开始，我觉得很简单。不能频繁调用嘛，用PSLockFunc将它锁起来就可以了，0.4秒之后再解锁。完成任务！

　　发给客...]]></description>
</item>

<item>
    <title><![CDATA[其它工具]]></title>
    <link>http://yerl.cn/blog/others</link>
    <author><![CDATA[Alan Yeh]]></author>
    <pubDate>Sun, 10 Jan 2016 00:00:00 +0000</pubDate>
    <dc:date>2016-01-10T00:00:00+00:00</dc:date>
    <guid><![CDATA[/blog/others]]></guid>
    <description><![CDATA[　　PSExtensions还将日常很多常用的函数封装起来了，比如将NSDateFormatter缓存起来，防止多次创建引起的性能损耗、字符串转UIColor等等工具。了解这些工具之后，在将来的开发中，就更得心应手了。

　　由于时间关系，这个Post在将来不定时更新新的工具的使用说明。

1 PSAnimation



　　简单封装UIView和CALayout的动画，方便编写简单动画。...]]></description>
</item>

<item>
    <title><![CDATA[PSJSWebview Javascript增强的WebView]]></title>
    <link>http://yerl.cn/blog/psjswebview</link>
    <author><![CDATA[Alan Yeh]]></author>
    <pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate>
    <dc:date>2016-01-09T00:00:00+00:00</dc:date>
    <guid><![CDATA[/blog/psjswebview]]></guid>
    <description><![CDATA[　　PSJSWebView是PSAspect的一个简单应用。

　　PSJSWebView为Javascript提供非常方便的调用OC代码的接口。现在已支持Json的基础数据类型。

　　OC调用Javascript直接使用[UIWebView -stringByEvaluatingJavaScriptFromString]方法即可。

2 代码示例


//Student.h
@inter...]]></description>
</item>

<item>
    <title><![CDATA[PSLog 更好的日志工具]]></title>
    <link>http://yerl.cn/blog/pslog</link>
    <author><![CDATA[Alan Yeh]]></author>
    <pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate>
    <dc:date>2016-01-08T00:00:00+00:00</dc:date>
    <guid><![CDATA[/blog/pslog]]></guid>
    <description><![CDATA[　　你还在用着NSLog来做日志输出吧？有没有想过，日志其实还可以更强大呢？PSLog便可以成为你的新的Debug利器。

　　PSLog是一个可自定义化，并可以提供一些方便的调试与记录的功能的日志工具。它与NSLog的用法几乎一模一样，所以没有学习的难度。PSLog可以将日志输出到不同的地方，默认实现了PSConsoleLogger、PSFileLogger、PSSQLiteLogger三...]]></description>
</item>

<item>
    <title><![CDATA[PSFile 文件管理工具]]></title>
    <link>http://yerl.cn/blog/psfile</link>
    <author><![CDATA[Alan Yeh]]></author>
    <pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate>
    <dc:date>2016-01-08T00:00:00+00:00</dc:date>
    <guid><![CDATA[/blog/psfile]]></guid>
    <description><![CDATA[　　你是否厌倦了写一长串代码来获取Documents目录？你是否厌倦了NSFileManager那一大串复杂又难记又难打的api？很好，你现在可以用PSFile了。因为它足够简单，但功能却不简单。

　　PSFile简单地封装了PSFileManager的一些功能，用于支持快速管理文件和目录。

1 用法



　　PSFile的头文件中，已经为每个方法做上了注释，看了注释之后便可以了解它的...]]></description>
</item>

<item>
    <title><![CDATA[PSThemeCenter、PSFontCenter]]></title>
    <link>http://yerl.cn/blog/psthemecenter-psfontcenter</link>
    <author><![CDATA[Alan Yeh]]></author>
    <pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate>
    <dc:date>2016-01-06T00:00:00+00:00</dc:date>
    <guid><![CDATA[/blog/psthemecenter-psfontcenter]]></guid>
    <description><![CDATA[　　当前，移动app对于界面的美观性等有越来越高的要求，一套UI已经满足不了用户日益增长的“精神需求”。因此，项目中经常会有更换主题、更换字体这类的需求。之前写主题管理时，经常乱得头皮发麻，经过几次整理、重构，完成了PSThemeCenter和PSFontCenter这两个管理界面管理类。

1 PSThemeCenter



　　PSThemeCenter是主题管理中心，主要用于管理Us...]]></description>
</item>

<item>
    <title><![CDATA[PSHttp AFNetworking简单封装]]></title>
    <link>http://yerl.cn/blog/pshttp</link>
    <author><![CDATA[Alan Yeh]]></author>
    <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
    <dc:date>2016-01-05T00:00:00+00:00</dc:date>
    <guid><![CDATA[/blog/pshttp]]></guid>
    <description><![CDATA[　　在我初学iOS开发的时候，我曾经考虑项目应该使用AFNetworking还是ASIHTTPRequest，到后来决定使用AFNetworking后，又经历了AFNetworking 2升级到AFNetworking 3，大量Api被抛弃。经历这些之后，我认为，有的框架有必要自己封装一套，然后在项目中全部使用自己封装的工具类，外界不需要关心PSHttp是自己封装系统Api，还是使用AFNe...]]></description>
</item>

<item>
    <title><![CDATA[PSLayout 代码布局工具]]></title>
    <link>http://yerl.cn/blog/pslayout</link>
    <author><![CDATA[Alan Yeh]]></author>
    <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
    <dc:date>2016-01-04T00:00:00+00:00</dc:date>
    <guid><![CDATA[/blog/pslayout]]></guid>
    <description><![CDATA[　　复杂业务、动画等，无法避免会用到代码布局，因此经常会在代码里充斥着xxxx.frame = CGRect(23, 55, 60, 11)之类布局代码，让人头晕目炫。写代码的同学估计也不会十分爽快，因为经常要去计算两个View的相对位置、相对父View的位置之类的（其实我就是这么走过来的），维护的同学看到这样的代码更是恶心想吐（我也是这么走过来的...）。

　　说到代码布局，不得不说到M...]]></description>
</item>


    </channel>
</rss>
